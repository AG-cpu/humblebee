


I want to be able to 
a) Search tv shows with ease on whatever device can connect to the file shares
b) Media sources (e.g. boneraper/tv). Each source contains one sqlite database
The database has relative paths to media files inside the directory (scans recursively)
c) Relational database design.
d) Portable and shit (idk)


* One thing to keep in mind (heavily nested into your brain fibers, son)
Since there will be many databases, one for each source, you're going to want to be able to combine 
all those databases into one. 
That means that you can't use auto incrementing keys. They need to be unique across databases.
BUT WHAT IF (I HAD A GIANT BRAIN CUM). There will be ONE master database of excelence.
This master database will hold the keys that have been used... but no.
It will only hold the last id used.
But I don't need a bloody database for that. I just need a file or something.
A fucking variable or some shit.
Man, this is fucked in my brain.
What I need is a damn file holding the last incremented id for EVERY BLOODY THING.

WTF how is this gonna work.
WE WILL SEE 
p
 ..( o o)..
samt afhverju ertu að hugsa allt á ensku gimpið þitt


* Tables

+series
| id                | PK, INTEGER, AUTO_INCREMENT, NOT NULL   |
| title             | VARCHAR, NOT NULL                       |
| summary           | TEXT (the show summary), NULLABLE?      |
| original_air_date | TIMESTAMP                               |
| genre             | VARCHAR  (or not)                       |
| end_date          | TIMESTAMP, nullable in case still going |
| language          | VARCHAR OR SOMETHING                    |

+season
| id            | PK, INTEGER, AUTO_INCREMENT, NOT NULL |
| season_number |                                       |
| start_date    |                                       |
| end_date      |                                       |
| series_id     |                                       |
|               |                                       |



* Table notes
** Maybe genre shouldn't be there. Make a join table with 'tags' tag<->tag-series<-> series (many many baby)

* Parsing
** Start with the easiest/most common case, single episode, properly named scene releases. 
*** Single eps can easily be parsed for series, season and episode info.
*** If it's a dir, check if there is a media file inside. If there are rars, unpack them into the output/[Series]/s[season] directory.






* CLASSES

** Episode(dict)
*** func is_fully_parsed(self)
self[ep_num] and self[season_num] and self[series_name]
if all exist, return true

** TVParser
*** attr parsed_eps
list successfully parsed ep objects
*** attr unparsed_eps
list partially or completely unparsed eps bin
*** attr single_ep_dirs
list directories that contain a single episode

*** func _scan_source(self, _dir)
is called recursively
goes through the subfolders in _dir looking for media files
will attempt to parse every subfolder name as an episode
if it is fully parseable it is dumped in [single_ep_dirs] and that subfolder will not be parsed further




* A thought about parsing
When an ep from parsed_eps is looked up on tvdb and no match is found 
what should happen is some kind of reverse parsing.
It will find the upmost directory containing the episode below source
e.g. if source is /home/tvshow/ and path is /home/tvshows/house/
the dir to start parsing is house/
It might assume that dir name is the series name and below that is parsed for season number

Although, might want to do something so +incoming doesn't get parsed
Perhaps keep a list of dirs that contain other properly parsed episodes and check if it's in that dir


* ability to organize by local db
there will be a simple local database editor
there will be an option which renames and organizes based on the info in local db linked to each file
